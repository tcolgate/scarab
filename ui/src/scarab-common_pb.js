// source: scarab-common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.scarab.JobArg', null, global);
goog.exportSymbol('proto.scarab.JobArgOption', null, global);
goog.exportSymbol('proto.scarab.JobArgValue', null, global);
goog.exportSymbol('proto.scarab.JobArgValue.ValueCase', null, global);
goog.exportSymbol('proto.scarab.ProfileArg', null, global);
goog.exportSymbol('proto.scarab.ProfileSpec', null, global);
goog.exportSymbol('proto.scarab.RegiteredProfile', null, global);
goog.exportSymbol('proto.scarab.StartJobRequest', null, global);
goog.exportSymbol('proto.scarab.StartJobResponse', null, global);
goog.exportSymbol('proto.scarab.WorkerDetails', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scarab.WorkerDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scarab.WorkerDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scarab.WorkerDetails.displayName = 'proto.scarab.WorkerDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scarab.RegiteredProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scarab.RegiteredProfile.repeatedFields_, null);
};
goog.inherits(proto.scarab.RegiteredProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scarab.RegiteredProfile.displayName = 'proto.scarab.RegiteredProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scarab.ProfileArg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scarab.ProfileArg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scarab.ProfileArg.displayName = 'proto.scarab.ProfileArg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scarab.ProfileSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scarab.ProfileSpec.repeatedFields_, null);
};
goog.inherits(proto.scarab.ProfileSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scarab.ProfileSpec.displayName = 'proto.scarab.ProfileSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scarab.JobArgOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scarab.JobArgOption.repeatedFields_, null);
};
goog.inherits(proto.scarab.JobArgOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scarab.JobArgOption.displayName = 'proto.scarab.JobArgOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scarab.JobArgValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.scarab.JobArgValue.oneofGroups_);
};
goog.inherits(proto.scarab.JobArgValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scarab.JobArgValue.displayName = 'proto.scarab.JobArgValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scarab.JobArg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scarab.JobArg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scarab.JobArg.displayName = 'proto.scarab.JobArg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scarab.StartJobRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scarab.StartJobRequest.repeatedFields_, null);
};
goog.inherits(proto.scarab.StartJobRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scarab.StartJobRequest.displayName = 'proto.scarab.StartJobRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scarab.StartJobResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scarab.StartJobResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scarab.StartJobResponse.displayName = 'proto.scarab.StartJobResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scarab.WorkerDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.scarab.WorkerDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scarab.WorkerDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.WorkerDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    addr: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scarab.WorkerDetails}
 */
proto.scarab.WorkerDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scarab.WorkerDetails;
  return proto.scarab.WorkerDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scarab.WorkerDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scarab.WorkerDetails}
 */
proto.scarab.WorkerDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scarab.WorkerDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scarab.WorkerDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scarab.WorkerDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.WorkerDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string addr = 1;
 * @return {string}
 */
proto.scarab.WorkerDetails.prototype.getAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scarab.WorkerDetails} returns this
 */
proto.scarab.WorkerDetails.prototype.setAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.scarab.WorkerDetails.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.scarab.WorkerDetails} returns this
 */
proto.scarab.WorkerDetails.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scarab.RegiteredProfile.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scarab.RegiteredProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.scarab.RegiteredProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scarab.RegiteredProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.RegiteredProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.scarab.ProfileSpec.toObject(includeInstance, f),
    workersList: jspb.Message.toObjectList(msg.getWorkersList(),
    proto.scarab.WorkerDetails.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scarab.RegiteredProfile}
 */
proto.scarab.RegiteredProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scarab.RegiteredProfile;
  return proto.scarab.RegiteredProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scarab.RegiteredProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scarab.RegiteredProfile}
 */
proto.scarab.RegiteredProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scarab.ProfileSpec;
      reader.readMessage(value,proto.scarab.ProfileSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 2:
      var value = new proto.scarab.WorkerDetails;
      reader.readMessage(value,proto.scarab.WorkerDetails.deserializeBinaryFromReader);
      msg.addWorkers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scarab.RegiteredProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scarab.RegiteredProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scarab.RegiteredProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.RegiteredProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scarab.ProfileSpec.serializeBinaryToWriter
    );
  }
  f = message.getWorkersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.scarab.WorkerDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProfileSpec spec = 1;
 * @return {?proto.scarab.ProfileSpec}
 */
proto.scarab.RegiteredProfile.prototype.getSpec = function() {
  return /** @type{?proto.scarab.ProfileSpec} */ (
    jspb.Message.getWrapperField(this, proto.scarab.ProfileSpec, 1));
};


/**
 * @param {?proto.scarab.ProfileSpec|undefined} value
 * @return {!proto.scarab.RegiteredProfile} returns this
*/
proto.scarab.RegiteredProfile.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.scarab.RegiteredProfile} returns this
 */
proto.scarab.RegiteredProfile.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scarab.RegiteredProfile.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated WorkerDetails workers = 2;
 * @return {!Array<!proto.scarab.WorkerDetails>}
 */
proto.scarab.RegiteredProfile.prototype.getWorkersList = function() {
  return /** @type{!Array<!proto.scarab.WorkerDetails>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scarab.WorkerDetails, 2));
};


/**
 * @param {!Array<!proto.scarab.WorkerDetails>} value
 * @return {!proto.scarab.RegiteredProfile} returns this
*/
proto.scarab.RegiteredProfile.prototype.setWorkersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.scarab.WorkerDetails=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scarab.WorkerDetails}
 */
proto.scarab.RegiteredProfile.prototype.addWorkers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.scarab.WorkerDetails, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scarab.RegiteredProfile} returns this
 */
proto.scarab.RegiteredProfile.prototype.clearWorkersList = function() {
  return this.setWorkersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scarab.ProfileArg.prototype.toObject = function(opt_includeInstance) {
  return proto.scarab.ProfileArg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scarab.ProfileArg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.ProfileArg.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pb_default: (f = msg.getDefault()) && proto.scarab.JobArgValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scarab.ProfileArg}
 */
proto.scarab.ProfileArg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scarab.ProfileArg;
  return proto.scarab.ProfileArg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scarab.ProfileArg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scarab.ProfileArg}
 */
proto.scarab.ProfileArg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.scarab.JobArgValue;
      reader.readMessage(value,proto.scarab.JobArgValue.deserializeBinaryFromReader);
      msg.setDefault(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scarab.ProfileArg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scarab.ProfileArg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scarab.ProfileArg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.ProfileArg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDefault();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.scarab.JobArgValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.scarab.ProfileArg.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scarab.ProfileArg} returns this
 */
proto.scarab.ProfileArg.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.scarab.ProfileArg.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.scarab.ProfileArg} returns this
 */
proto.scarab.ProfileArg.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional JobArgValue default = 3;
 * @return {?proto.scarab.JobArgValue}
 */
proto.scarab.ProfileArg.prototype.getDefault = function() {
  return /** @type{?proto.scarab.JobArgValue} */ (
    jspb.Message.getWrapperField(this, proto.scarab.JobArgValue, 3));
};


/**
 * @param {?proto.scarab.JobArgValue|undefined} value
 * @return {!proto.scarab.ProfileArg} returns this
*/
proto.scarab.ProfileArg.prototype.setDefault = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.scarab.ProfileArg} returns this
 */
proto.scarab.ProfileArg.prototype.clearDefault = function() {
  return this.setDefault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scarab.ProfileArg.prototype.hasDefault = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scarab.ProfileSpec.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scarab.ProfileSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.scarab.ProfileSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scarab.ProfileSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.ProfileSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    profile: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    argsList: jspb.Message.toObjectList(msg.getArgsList(),
    proto.scarab.ProfileArg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scarab.ProfileSpec}
 */
proto.scarab.ProfileSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scarab.ProfileSpec;
  return proto.scarab.ProfileSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scarab.ProfileSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scarab.ProfileSpec}
 */
proto.scarab.ProfileSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfile(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = new proto.scarab.ProfileArg;
      reader.readMessage(value,proto.scarab.ProfileArg.deserializeBinaryFromReader);
      msg.addArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scarab.ProfileSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scarab.ProfileSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scarab.ProfileSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.ProfileSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfile();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.scarab.ProfileArg.serializeBinaryToWriter
    );
  }
};


/**
 * optional string profile = 1;
 * @return {string}
 */
proto.scarab.ProfileSpec.prototype.getProfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scarab.ProfileSpec} returns this
 */
proto.scarab.ProfileSpec.prototype.setProfile = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.scarab.ProfileSpec.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.scarab.ProfileSpec} returns this
 */
proto.scarab.ProfileSpec.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated ProfileArg args = 3;
 * @return {!Array<!proto.scarab.ProfileArg>}
 */
proto.scarab.ProfileSpec.prototype.getArgsList = function() {
  return /** @type{!Array<!proto.scarab.ProfileArg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scarab.ProfileArg, 3));
};


/**
 * @param {!Array<!proto.scarab.ProfileArg>} value
 * @return {!proto.scarab.ProfileSpec} returns this
*/
proto.scarab.ProfileSpec.prototype.setArgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.scarab.ProfileArg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scarab.ProfileArg}
 */
proto.scarab.ProfileSpec.prototype.addArgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.scarab.ProfileArg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scarab.ProfileSpec} returns this
 */
proto.scarab.ProfileSpec.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scarab.JobArgOption.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scarab.JobArgOption.prototype.toObject = function(opt_includeInstance) {
  return proto.scarab.JobArgOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scarab.JobArgOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.JobArgOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    optionList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    multiple: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scarab.JobArgOption}
 */
proto.scarab.JobArgOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scarab.JobArgOption;
  return proto.scarab.JobArgOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scarab.JobArgOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scarab.JobArgOption}
 */
proto.scarab.JobArgOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addOption(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMultiple(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scarab.JobArgOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scarab.JobArgOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scarab.JobArgOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.JobArgOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOptionList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getMultiple();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated string option = 1;
 * @return {!Array<string>}
 */
proto.scarab.JobArgOption.prototype.getOptionList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.scarab.JobArgOption} returns this
 */
proto.scarab.JobArgOption.prototype.setOptionList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.scarab.JobArgOption} returns this
 */
proto.scarab.JobArgOption.prototype.addOption = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scarab.JobArgOption} returns this
 */
proto.scarab.JobArgOption.prototype.clearOptionList = function() {
  return this.setOptionList([]);
};


/**
 * optional bool multiple = 2;
 * @return {boolean}
 */
proto.scarab.JobArgOption.prototype.getMultiple = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.scarab.JobArgOption} returns this
 */
proto.scarab.JobArgOption.prototype.setMultiple = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.scarab.JobArgValue.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.scarab.JobArgValue.ValueCase = {
  VALUE_NOT_SET: 0,
  STRING: 1,
  FLOAT: 2,
  BOOL: 3,
  OPTION: 4
};

/**
 * @return {proto.scarab.JobArgValue.ValueCase}
 */
proto.scarab.JobArgValue.prototype.getValueCase = function() {
  return /** @type {proto.scarab.JobArgValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.scarab.JobArgValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scarab.JobArgValue.prototype.toObject = function(opt_includeInstance) {
  return proto.scarab.JobArgValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scarab.JobArgValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.JobArgValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    string: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pb_float: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    bool: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    option: (f = msg.getOption()) && proto.scarab.JobArgOption.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scarab.JobArgValue}
 */
proto.scarab.JobArgValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scarab.JobArgValue;
  return proto.scarab.JobArgValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scarab.JobArgValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scarab.JobArgValue}
 */
proto.scarab.JobArgValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloat(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBool(value);
      break;
    case 4:
      var value = new proto.scarab.JobArgOption;
      reader.readMessage(value,proto.scarab.JobArgOption.deserializeBinaryFromReader);
      msg.setOption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scarab.JobArgValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scarab.JobArgValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scarab.JobArgValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.JobArgValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getOption();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.scarab.JobArgOption.serializeBinaryToWriter
    );
  }
};


/**
 * optional string string = 1;
 * @return {string}
 */
proto.scarab.JobArgValue.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scarab.JobArgValue} returns this
 */
proto.scarab.JobArgValue.prototype.setString = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.scarab.JobArgValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.scarab.JobArgValue} returns this
 */
proto.scarab.JobArgValue.prototype.clearString = function() {
  return jspb.Message.setOneofField(this, 1, proto.scarab.JobArgValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scarab.JobArgValue.prototype.hasString = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float float = 2;
 * @return {number}
 */
proto.scarab.JobArgValue.prototype.getFloat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.scarab.JobArgValue} returns this
 */
proto.scarab.JobArgValue.prototype.setFloat = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.scarab.JobArgValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.scarab.JobArgValue} returns this
 */
proto.scarab.JobArgValue.prototype.clearFloat = function() {
  return jspb.Message.setOneofField(this, 2, proto.scarab.JobArgValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scarab.JobArgValue.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool bool = 3;
 * @return {boolean}
 */
proto.scarab.JobArgValue.prototype.getBool = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.scarab.JobArgValue} returns this
 */
proto.scarab.JobArgValue.prototype.setBool = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.scarab.JobArgValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.scarab.JobArgValue} returns this
 */
proto.scarab.JobArgValue.prototype.clearBool = function() {
  return jspb.Message.setOneofField(this, 3, proto.scarab.JobArgValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scarab.JobArgValue.prototype.hasBool = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional JobArgOption option = 4;
 * @return {?proto.scarab.JobArgOption}
 */
proto.scarab.JobArgValue.prototype.getOption = function() {
  return /** @type{?proto.scarab.JobArgOption} */ (
    jspb.Message.getWrapperField(this, proto.scarab.JobArgOption, 4));
};


/**
 * @param {?proto.scarab.JobArgOption|undefined} value
 * @return {!proto.scarab.JobArgValue} returns this
*/
proto.scarab.JobArgValue.prototype.setOption = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.scarab.JobArgValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.scarab.JobArgValue} returns this
 */
proto.scarab.JobArgValue.prototype.clearOption = function() {
  return this.setOption(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scarab.JobArgValue.prototype.hasOption = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scarab.JobArg.prototype.toObject = function(opt_includeInstance) {
  return proto.scarab.JobArg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scarab.JobArg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.JobArg.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.scarab.JobArgValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scarab.JobArg}
 */
proto.scarab.JobArg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scarab.JobArg;
  return proto.scarab.JobArg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scarab.JobArg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scarab.JobArg}
 */
proto.scarab.JobArg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.scarab.JobArgValue;
      reader.readMessage(value,proto.scarab.JobArgValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scarab.JobArg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scarab.JobArg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scarab.JobArg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.JobArg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.scarab.JobArgValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.scarab.JobArg.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scarab.JobArg} returns this
 */
proto.scarab.JobArg.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional JobArgValue value = 2;
 * @return {?proto.scarab.JobArgValue}
 */
proto.scarab.JobArg.prototype.getValue = function() {
  return /** @type{?proto.scarab.JobArgValue} */ (
    jspb.Message.getWrapperField(this, proto.scarab.JobArgValue, 2));
};


/**
 * @param {?proto.scarab.JobArgValue|undefined} value
 * @return {!proto.scarab.JobArg} returns this
*/
proto.scarab.JobArg.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.scarab.JobArg} returns this
 */
proto.scarab.JobArg.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scarab.JobArg.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scarab.StartJobRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scarab.StartJobRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scarab.StartJobRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scarab.StartJobRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.StartJobRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    profile: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    argsList: jspb.Message.toObjectList(msg.getArgsList(),
    proto.scarab.JobArg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scarab.StartJobRequest}
 */
proto.scarab.StartJobRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scarab.StartJobRequest;
  return proto.scarab.StartJobRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scarab.StartJobRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scarab.StartJobRequest}
 */
proto.scarab.StartJobRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfile(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = new proto.scarab.JobArg;
      reader.readMessage(value,proto.scarab.JobArg.deserializeBinaryFromReader);
      msg.addArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scarab.StartJobRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scarab.StartJobRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scarab.StartJobRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.StartJobRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfile();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.scarab.JobArg.serializeBinaryToWriter
    );
  }
};


/**
 * optional string profile = 1;
 * @return {string}
 */
proto.scarab.StartJobRequest.prototype.getProfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scarab.StartJobRequest} returns this
 */
proto.scarab.StartJobRequest.prototype.setProfile = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.scarab.StartJobRequest.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.scarab.StartJobRequest} returns this
 */
proto.scarab.StartJobRequest.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated JobArg args = 3;
 * @return {!Array<!proto.scarab.JobArg>}
 */
proto.scarab.StartJobRequest.prototype.getArgsList = function() {
  return /** @type{!Array<!proto.scarab.JobArg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scarab.JobArg, 3));
};


/**
 * @param {!Array<!proto.scarab.JobArg>} value
 * @return {!proto.scarab.StartJobRequest} returns this
*/
proto.scarab.StartJobRequest.prototype.setArgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.scarab.JobArg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scarab.JobArg}
 */
proto.scarab.StartJobRequest.prototype.addArgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.scarab.JobArg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scarab.StartJobRequest} returns this
 */
proto.scarab.StartJobRequest.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scarab.StartJobResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scarab.StartJobResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scarab.StartJobResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.StartJobResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scarab.StartJobResponse}
 */
proto.scarab.StartJobResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scarab.StartJobResponse;
  return proto.scarab.StartJobResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scarab.StartJobResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scarab.StartJobResponse}
 */
proto.scarab.StartJobResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scarab.StartJobResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scarab.StartJobResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scarab.StartJobResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scarab.StartJobResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.scarab.StartJobResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scarab.StartJobResponse} returns this
 */
proto.scarab.StartJobResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.scarab);
