// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package scarab

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerUIClient is the client API for ManagerUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerUIClient interface {
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error)
	ListProfiles(ctx context.Context, in *ListProfilesRequest, opts ...grpc.CallOption) (*ListProfilesResponse, error)
	WatchActiveJobs(ctx context.Context, in *WatchActiveJobsRequest, opts ...grpc.CallOption) (ManagerUI_WatchActiveJobsClient, error)
}

type managerUIClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerUIClient(cc grpc.ClientConnInterface) ManagerUIClient {
	return &managerUIClient{cc}
}

func (c *managerUIClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error) {
	out := new(StartJobResponse)
	err := c.cc.Invoke(ctx, "/scarab.ManagerUI/StartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerUIClient) ListProfiles(ctx context.Context, in *ListProfilesRequest, opts ...grpc.CallOption) (*ListProfilesResponse, error) {
	out := new(ListProfilesResponse)
	err := c.cc.Invoke(ctx, "/scarab.ManagerUI/ListProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerUIClient) WatchActiveJobs(ctx context.Context, in *WatchActiveJobsRequest, opts ...grpc.CallOption) (ManagerUI_WatchActiveJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ManagerUI_ServiceDesc.Streams[0], "/scarab.ManagerUI/WatchActiveJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &managerUIWatchActiveJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManagerUI_WatchActiveJobsClient interface {
	Recv() (*WatchActiveJobsResponse, error)
	grpc.ClientStream
}

type managerUIWatchActiveJobsClient struct {
	grpc.ClientStream
}

func (x *managerUIWatchActiveJobsClient) Recv() (*WatchActiveJobsResponse, error) {
	m := new(WatchActiveJobsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManagerUIServer is the server API for ManagerUI service.
// All implementations must embed UnimplementedManagerUIServer
// for forward compatibility
type ManagerUIServer interface {
	StartJob(context.Context, *StartJobRequest) (*StartJobResponse, error)
	ListProfiles(context.Context, *ListProfilesRequest) (*ListProfilesResponse, error)
	WatchActiveJobs(*WatchActiveJobsRequest, ManagerUI_WatchActiveJobsServer) error
	mustEmbedUnimplementedManagerUIServer()
}

// UnimplementedManagerUIServer must be embedded to have forward compatible implementations.
type UnimplementedManagerUIServer struct {
}

func (UnimplementedManagerUIServer) StartJob(context.Context, *StartJobRequest) (*StartJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (UnimplementedManagerUIServer) ListProfiles(context.Context, *ListProfilesRequest) (*ListProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfiles not implemented")
}
func (UnimplementedManagerUIServer) WatchActiveJobs(*WatchActiveJobsRequest, ManagerUI_WatchActiveJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchActiveJobs not implemented")
}
func (UnimplementedManagerUIServer) mustEmbedUnimplementedManagerUIServer() {}

// UnsafeManagerUIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerUIServer will
// result in compilation errors.
type UnsafeManagerUIServer interface {
	mustEmbedUnimplementedManagerUIServer()
}

func RegisterManagerUIServer(s grpc.ServiceRegistrar, srv ManagerUIServer) {
	s.RegisterService(&ManagerUI_ServiceDesc, srv)
}

func _ManagerUI_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerUIServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scarab.ManagerUI/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerUIServer).StartJob(ctx, req.(*StartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerUI_ListProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerUIServer).ListProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scarab.ManagerUI/ListProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerUIServer).ListProfiles(ctx, req.(*ListProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerUI_WatchActiveJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchActiveJobsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerUIServer).WatchActiveJobs(m, &managerUIWatchActiveJobsServer{stream})
}

type ManagerUI_WatchActiveJobsServer interface {
	Send(*WatchActiveJobsResponse) error
	grpc.ServerStream
}

type managerUIWatchActiveJobsServer struct {
	grpc.ServerStream
}

func (x *managerUIWatchActiveJobsServer) Send(m *WatchActiveJobsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ManagerUI_ServiceDesc is the grpc.ServiceDesc for ManagerUI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerUI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scarab.ManagerUI",
	HandlerType: (*ManagerUIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJob",
			Handler:    _ManagerUI_StartJob_Handler,
		},
		{
			MethodName: "ListProfiles",
			Handler:    _ManagerUI_ListProfiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchActiveJobs",
			Handler:       _ManagerUI_WatchActiveJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scarab-ui.proto",
}
