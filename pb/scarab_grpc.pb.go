// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package scarab

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	RunProfile(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error)
	RegisterProfile(ctx context.Context, in *RegisterProfileRequest, opts ...grpc.CallOption) (Manager_RegisterProfileClient, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) RunProfile(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error) {
	out := new(StartJobResponse)
	err := c.cc.Invoke(ctx, "/scarab.Manager/RunProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) RegisterProfile(ctx context.Context, in *RegisterProfileRequest, opts ...grpc.CallOption) (Manager_RegisterProfileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[0], "/scarab.Manager/RegisterProfile", opts...)
	if err != nil {
		return nil, err
	}
	x := &managerRegisterProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Manager_RegisterProfileClient interface {
	Recv() (*KeepAlive, error)
	grpc.ClientStream
}

type managerRegisterProfileClient struct {
	grpc.ClientStream
}

func (x *managerRegisterProfileClient) Recv() (*KeepAlive, error) {
	m := new(KeepAlive)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	RunProfile(context.Context, *StartJobRequest) (*StartJobResponse, error)
	RegisterProfile(*RegisterProfileRequest, Manager_RegisterProfileServer) error
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) RunProfile(context.Context, *StartJobRequest) (*StartJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunProfile not implemented")
}
func (UnimplementedManagerServer) RegisterProfile(*RegisterProfileRequest, Manager_RegisterProfileServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterProfile not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_RunProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).RunProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scarab.Manager/RunProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).RunProfile(ctx, req.(*StartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_RegisterProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterProfileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).RegisterProfile(m, &managerRegisterProfileServer{stream})
}

type Manager_RegisterProfileServer interface {
	Send(*KeepAlive) error
	grpc.ServerStream
}

type managerRegisterProfileServer struct {
	grpc.ServerStream
}

func (x *managerRegisterProfileServer) Send(m *KeepAlive) error {
	return x.ServerStream.SendMsg(m)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scarab.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunProfile",
			Handler:    _Manager_RunProfile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterProfile",
			Handler:       _Manager_RegisterProfile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scarab.proto",
}

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	ReportLoad(ctx context.Context, in *ReportLoadRequest, opts ...grpc.CallOption) (Worker_ReportLoadClient, error)
	RunJob(ctx context.Context, opts ...grpc.CallOption) (Worker_RunJobClient, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) ReportLoad(ctx context.Context, in *ReportLoadRequest, opts ...grpc.CallOption) (Worker_ReportLoadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[0], "/scarab.Worker/ReportLoad", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerReportLoadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_ReportLoadClient interface {
	Recv() (*LoadMetrics, error)
	grpc.ClientStream
}

type workerReportLoadClient struct {
	grpc.ClientStream
}

func (x *workerReportLoadClient) Recv() (*LoadMetrics, error) {
	m := new(LoadMetrics)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) RunJob(ctx context.Context, opts ...grpc.CallOption) (Worker_RunJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[1], "/scarab.Worker/RunJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerRunJobClient{stream}
	return x, nil
}

type Worker_RunJobClient interface {
	Send(*RunJobRequest) error
	Recv() (*JobMetrics, error)
	grpc.ClientStream
}

type workerRunJobClient struct {
	grpc.ClientStream
}

func (x *workerRunJobClient) Send(m *RunJobRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerRunJobClient) Recv() (*JobMetrics, error) {
	m := new(JobMetrics)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	ReportLoad(*ReportLoadRequest, Worker_ReportLoadServer) error
	RunJob(Worker_RunJobServer) error
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) ReportLoad(*ReportLoadRequest, Worker_ReportLoadServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportLoad not implemented")
}
func (UnimplementedWorkerServer) RunJob(Worker_RunJobServer) error {
	return status.Errorf(codes.Unimplemented, "method RunJob not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_ReportLoad_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReportLoadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).ReportLoad(m, &workerReportLoadServer{stream})
}

type Worker_ReportLoadServer interface {
	Send(*LoadMetrics) error
	grpc.ServerStream
}

type workerReportLoadServer struct {
	grpc.ServerStream
}

func (x *workerReportLoadServer) Send(m *LoadMetrics) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_RunJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).RunJob(&workerRunJobServer{stream})
}

type Worker_RunJobServer interface {
	Send(*JobMetrics) error
	Recv() (*RunJobRequest, error)
	grpc.ServerStream
}

type workerRunJobServer struct {
	grpc.ServerStream
}

func (x *workerRunJobServer) Send(m *JobMetrics) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerRunJobServer) Recv() (*RunJobRequest, error) {
	m := new(RunJobRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scarab.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportLoad",
			Handler:       _Worker_ReportLoad_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RunJob",
			Handler:       _Worker_RunJob_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "scarab.proto",
}

// ManagerUIClient is the client API for ManagerUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerUIClient interface {
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error)
	ListProfiles(ctx context.Context, in *ListProfilesRequest, opts ...grpc.CallOption) (*ListProfilesResponse, error)
	WatchActiveJobs(ctx context.Context, in *WatchActiveJobsRequest, opts ...grpc.CallOption) (ManagerUI_WatchActiveJobsClient, error)
}

type managerUIClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerUIClient(cc grpc.ClientConnInterface) ManagerUIClient {
	return &managerUIClient{cc}
}

func (c *managerUIClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error) {
	out := new(StartJobResponse)
	err := c.cc.Invoke(ctx, "/scarab.ManagerUI/StartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerUIClient) ListProfiles(ctx context.Context, in *ListProfilesRequest, opts ...grpc.CallOption) (*ListProfilesResponse, error) {
	out := new(ListProfilesResponse)
	err := c.cc.Invoke(ctx, "/scarab.ManagerUI/ListProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerUIClient) WatchActiveJobs(ctx context.Context, in *WatchActiveJobsRequest, opts ...grpc.CallOption) (ManagerUI_WatchActiveJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ManagerUI_ServiceDesc.Streams[0], "/scarab.ManagerUI/WatchActiveJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &managerUIWatchActiveJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManagerUI_WatchActiveJobsClient interface {
	Recv() (*WatchActiveJobsResponse, error)
	grpc.ClientStream
}

type managerUIWatchActiveJobsClient struct {
	grpc.ClientStream
}

func (x *managerUIWatchActiveJobsClient) Recv() (*WatchActiveJobsResponse, error) {
	m := new(WatchActiveJobsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManagerUIServer is the server API for ManagerUI service.
// All implementations must embed UnimplementedManagerUIServer
// for forward compatibility
type ManagerUIServer interface {
	StartJob(context.Context, *StartJobRequest) (*StartJobResponse, error)
	ListProfiles(context.Context, *ListProfilesRequest) (*ListProfilesResponse, error)
	WatchActiveJobs(*WatchActiveJobsRequest, ManagerUI_WatchActiveJobsServer) error
	mustEmbedUnimplementedManagerUIServer()
}

// UnimplementedManagerUIServer must be embedded to have forward compatible implementations.
type UnimplementedManagerUIServer struct {
}

func (UnimplementedManagerUIServer) StartJob(context.Context, *StartJobRequest) (*StartJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (UnimplementedManagerUIServer) ListProfiles(context.Context, *ListProfilesRequest) (*ListProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfiles not implemented")
}
func (UnimplementedManagerUIServer) WatchActiveJobs(*WatchActiveJobsRequest, ManagerUI_WatchActiveJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchActiveJobs not implemented")
}
func (UnimplementedManagerUIServer) mustEmbedUnimplementedManagerUIServer() {}

// UnsafeManagerUIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerUIServer will
// result in compilation errors.
type UnsafeManagerUIServer interface {
	mustEmbedUnimplementedManagerUIServer()
}

func RegisterManagerUIServer(s grpc.ServiceRegistrar, srv ManagerUIServer) {
	s.RegisterService(&ManagerUI_ServiceDesc, srv)
}

func _ManagerUI_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerUIServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scarab.ManagerUI/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerUIServer).StartJob(ctx, req.(*StartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerUI_ListProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerUIServer).ListProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scarab.ManagerUI/ListProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerUIServer).ListProfiles(ctx, req.(*ListProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerUI_WatchActiveJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchActiveJobsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerUIServer).WatchActiveJobs(m, &managerUIWatchActiveJobsServer{stream})
}

type ManagerUI_WatchActiveJobsServer interface {
	Send(*WatchActiveJobsResponse) error
	grpc.ServerStream
}

type managerUIWatchActiveJobsServer struct {
	grpc.ServerStream
}

func (x *managerUIWatchActiveJobsServer) Send(m *WatchActiveJobsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ManagerUI_ServiceDesc is the grpc.ServiceDesc for ManagerUI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerUI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scarab.ManagerUI",
	HandlerType: (*ManagerUIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJob",
			Handler:    _ManagerUI_StartJob_Handler,
		},
		{
			MethodName: "ListProfiles",
			Handler:    _ManagerUI_ListProfiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchActiveJobs",
			Handler:       _ManagerUI_WatchActiveJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scarab.proto",
}
