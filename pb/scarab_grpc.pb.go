// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package scarab

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaderClient is the client API for Leader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (Leader_RegisterClient, error)
}

type leaderClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderClient(cc grpc.ClientConnInterface) LeaderClient {
	return &leaderClient{cc}
}

func (c *leaderClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (Leader_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Leader_ServiceDesc.Streams[0], "/scarab.Leader/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &leaderRegisterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Leader_RegisterClient interface {
	Recv() (*KeepAlive, error)
	grpc.ClientStream
}

type leaderRegisterClient struct {
	grpc.ClientStream
}

func (x *leaderRegisterClient) Recv() (*KeepAlive, error) {
	m := new(KeepAlive)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LeaderServer is the server API for Leader service.
// All implementations must embed UnimplementedLeaderServer
// for forward compatibility
type LeaderServer interface {
	Register(*RegisterRequest, Leader_RegisterServer) error
	mustEmbedUnimplementedLeaderServer()
}

// UnimplementedLeaderServer must be embedded to have forward compatible implementations.
type UnimplementedLeaderServer struct {
}

func (UnimplementedLeaderServer) Register(*RegisterRequest, Leader_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedLeaderServer) mustEmbedUnimplementedLeaderServer() {}

// UnsafeLeaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderServer will
// result in compilation errors.
type UnsafeLeaderServer interface {
	mustEmbedUnimplementedLeaderServer()
}

func RegisterLeaderServer(s grpc.ServiceRegistrar, srv LeaderServer) {
	s.RegisterService(&Leader_ServiceDesc, srv)
}

func _Leader_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LeaderServer).Register(m, &leaderRegisterServer{stream})
}

type Leader_RegisterServer interface {
	Send(*KeepAlive) error
	grpc.ServerStream
}

type leaderRegisterServer struct {
	grpc.ServerStream
}

func (x *leaderRegisterServer) Send(m *KeepAlive) error {
	return x.ServerStream.SendMsg(m)
}

// Leader_ServiceDesc is the grpc.ServiceDesc for Leader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Leader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scarab.Leader",
	HandlerType: (*LeaderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Leader_Register_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scarab.proto",
}

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	RunJob(ctx context.Context, in *RunJobRequest, opts ...grpc.CallOption) (Worker_RunJobClient, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) RunJob(ctx context.Context, in *RunJobRequest, opts ...grpc.CallOption) (Worker_RunJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[0], "/scarab.Worker/RunJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerRunJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_RunJobClient interface {
	Recv() (*JobMetrics, error)
	grpc.ClientStream
}

type workerRunJobClient struct {
	grpc.ClientStream
}

func (x *workerRunJobClient) Recv() (*JobMetrics, error) {
	m := new(JobMetrics)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	RunJob(*RunJobRequest, Worker_RunJobServer) error
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) RunJob(*RunJobRequest, Worker_RunJobServer) error {
	return status.Errorf(codes.Unimplemented, "method RunJob not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_RunJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).RunJob(m, &workerRunJobServer{stream})
}

type Worker_RunJobServer interface {
	Send(*JobMetrics) error
	grpc.ServerStream
}

type workerRunJobServer struct {
	grpc.ServerStream
}

func (x *workerRunJobServer) Send(m *JobMetrics) error {
	return x.ServerStream.SendMsg(m)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scarab.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunJob",
			Handler:       _Worker_RunJob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scarab.proto",
}
